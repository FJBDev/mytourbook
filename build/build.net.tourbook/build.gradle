plugins {
  id 'com.github.dkorotych.gradle-maven-exec' version '1.2.1'
}

// get MT version and remove quotes
def mtVersionRaw = project(':mytourbook').ext.myTourbookVersion
def mtVersion = mtVersionRaw.replaceAll('\'', '')

def productDirCreated			= file('../build.net.tourbook.product/target/products')
def productDirArchive			= file('../../../../mytourbook-PRODUCT/' + mtVersion)

def winInnoSetupDir				= file('../../INSTALL-UPDATES/installer-net.tourbook/win-Inno.Setup')
//def innoSetupCompilerAppName	= file('c:/Program Files (x86)/Inno Setup 5/Compil32.exe').absolutePath
def innoSetupCompilerAppName	= file('c:/Program Files (x86)/Inno Setup 5/iscc.exe').absolutePath



defaultTasks 'mt_0_Build'

task mt_0_Build          
mt_0_Build.dependsOn( 
	
	'create-build-files',
	'mt_2_BuildProduct',
	'mt_3_CopyProduct',
	'mt_4_ExtractWinFiles',
	'mt_5_CreateExeFiles',
	'mt_6_CleanupWinFiles'
)

/*
* 1. Copy all MT files into a temp folder, it is using task/target 'create-build-files' 
*/
ant.importBuild 'CREATE_MT_BuildFiles.xml'


/*
* 2. Build product with maven/tycho
*/
task mt_2_BuildProduct {
         
	doLast {
	
		//run: mvn verify -P build-release

		def buildDir = file('../..')
 	
        mavenexec {
        
            workingDir	buildDir
            goals		'verify'
            
			options {
//				threads				= '2C'	-> causes warnings and is not working
				activateProfiles	= ['build-release']
        	}
		}
	}
}

/*
* Copy generated product file into product archive folder
*/
task mt_3_CopyProduct {

	doLast {

//		From:	C:\DAT\MT\mytourbook\build\build.net.tourbook
//	    Into:	C:\DAT\MT\mytourbook\build\build.net.tourbook.product\target\products

		println '\tFrom ' + productDirCreated       
		println '\tInto ' + productDirArchive

		// copy into archive folder
		copy {
		
			from (productDirCreated) {
				include '*' + mtVersion + '*'
			}
			
			into productDirArchive
		}
	}
}


/*
 Extract win archives in separate dirs that the exe files can be compiled
*/
task mt_4_ExtractWinFiles {
        
	doLast {
	    
		println 'Extracting from ' + productDirArchive
		
		def archiveDirName = productDirArchive.absolutePath
		
		file(productDirArchive).eachFileMatch(~/.*win.*.zip/) { winZipFile->
			
			def winZipFileName = winZipFile.name
			def winZipName = winZipFileName.take(winZipFileName.lastIndexOf('.'))
			
			def outputDir = file(archiveDirName + '/' + winZipName)

			println '\t' + outputDir
			
			copy {
				from zipTree(winZipFile)
				into outputDir
			}
		}
	}
}

/*
 Create win exe files
*/
task mt_5_CreateExeFiles {
        
	doLast {
	    
		println 'Creating Windows setup files'
		
		def winInnoSetupDirName = winInnoSetupDir.absolutePath
		
		def win32SetupConfigFilename = file(winInnoSetupDirName + '/mytourbook-core-32-create-setup_exe.iss').absolutePath
		def win64SetupConfigFilename = file(winInnoSetupDirName + '/mytourbook-core-64-create-setup_exe.iss').absolutePath
		
//		println winInnoSetupDir
//		println innoSetupCompilerAppName
//		println win32SetupConfigFilename
		
		exec {
		
			println '\twin 32'
		
			commandLine 'cmd', '/c', innoSetupCompilerAppName
			args		win32SetupConfigFilename
//			args		'/cc', win32SetupConfigFilename
		}

		exec {
		
			println '\twin 64'
		
			commandLine 'cmd', '/c', innoSetupCompilerAppName
			args		win64SetupConfigFilename
//			args		'/cc', win64SetupConfigFilename
		}
	}
}


/*
 Extract win archives in separate dirs that the exe files can be compiled
*/
task mt_6_CleanupWinFiles {
        
	doLast {
	    
		println 'Deleting extracted files from ' + productDirArchive
		
		def archiveDirName = productDirArchive.absolutePath
		def hiddenDir = file(archiveDirName + '/hidden')
		
		file(productDirArchive).eachFileMatch(~/.*win.*.zip/) { winZipFile->
			
			def winZipFileName = winZipFile.name
			def winZipName = winZipFileName.take(winZipFileName.lastIndexOf('.'))
			
			def outputDir = file(archiveDirName + '/' + winZipName)

			println '\tdelete\t\t' + outputDir
			
			// delete extracted files
			outputDir.deleteDir()
			
			// move zip into hidden folder
			hiddenDir.mkdirs()
			def hiddenFile = file(hiddenDir.absolutePath + '/' + winZipFileName)
			println '\tmove into\t' + hiddenFile 
			
			// delete old file when available
			hiddenFile.delete()
			
			winZipFile.renameTo(hiddenFile)
		}
	}
}



plugins {

   id 'com.github.dkorotych.gradle-maven-exec' version '2.2.1'
}

// get MT version and remove quotes
def _mtVersionRaw                = project(':mytourbook').ext.myTourbookVersion      // '18.2.0'
def _mtVersion                   = _mtVersionRaw.replaceAll('\'', '')                // 18.2.0

def _dirBuildFiles               = file('../../../../mytourbook-BUILD-autocreated/core')
def _dirProductBuilt             = file('../build.net.tourbook.product/target/products')
def _dirProductArchive           = file('../../../../mytourbook-PRODUCT/' + _mtVersion)
def _dirProductReleaseNotes      = file('../../info/release-notes')
def _dirSecretKeys               = file('../../secret-keys')
def _pathProductArchive          = _dirProductArchive.absolutePath
                                 
def _dirWinInnoSetup             = file('../../INSTALL-UPDATES/installer-net.tourbook/win-Inno.Setup')
def _pathInnoSetupCompilerApp    = file('c:/Program Files (x86)/Inno Setup 5/iscc.exe').absolutePath


gradle.taskGraph.beforeTask { Task task ->

    // show a task indicator
   println '---------------------------------------------------------------------------------------'
   println ''
}

gradle.taskGraph.afterTask { Task task ->

    // show more space
   println ''
   println ''
}

defaultTasks 'mt_0_Build'

task mt_0_Build          
mt_0_Build.dependsOn( 

   'mt_10_CreateBuildFiles',
   'mt_11_InsertDropboxAppKeys',
   'mt_20_BuildProduct',
   'mt_30_CopyProduct',
   'mt_40_ExtractWinFiles',
   'mt_50_CreateExeFiles',
   'mt_60_CleanupWinFiles',
   'mt_70_CopyReleaseNotes',
)


/*
* 1. Copy all MT files into a temp folder, it is using task/target 'create-build-files' from the Ant script
*/
task mt_10_CreateBuildFiles {

   // import Ant build, every target will be a task
   ant.importBuild 'CREATE_MT_BuildFiles.xml'

   dependsOn('create-build-files')
}

/*
* 1. a) Insert the Dropbox MyTourbook app client_id and secret_id from a local file.
* Note: The build will fail if the values were not found.
* The file is expected to be here : secret-keys/dropbox.txt
* with this format :
* client_id={value}
* secret_id={value}
*
* IMPORTANT: DO NOT COMMIT THE CLIENT_ID & SECRET_ID KEYS TO GITHUB!!!!
*/
task mt_11_InsertDropboxAppKeys {

  ext.convertStringToCharArray = { stringToConvert ->

	def charArray="";

     	for (int index = 0; index < stringToConvert.length(); ++index) {
		   charArray += '\''
		   charArray += stringToConvert.charAt(index)
		   charArray += '\''
		   if (index < stringToConvert.length() -1) {
		   	charArray += ', '
		   }
		}

	return charArray
    }

  doLast {

      def Properties dropboxKeys = new Properties()
      def clientId;
      def secretId; 
      def clientIdCharArray;
      def secretIdCharArray; 
      def dropboxKeysFilename = 'dropbox.txt'
      
      def dropboxKeysFile = file(_dirSecretKeys.absolutePath + '/' + dropboxKeysFilename)
      def prefPageDropboxDirectoryPath = file(_dirBuildFiles.absolutePath + '/net.tourbook.cloud/src/net/tourbook/cloud/dropbox')
      def prefPageDropboxFileName = 'PrefPageDropbox.java'
      def prefPageDropboxFile = file(prefPageDropboxDirectoryPath.absolutePath + '/' + prefPageDropboxFileName)

      if (dropboxKeysFile.exists() && dropboxKeysFile.canRead()) {
      
	 // Extract the keys
	 dropboxKeys.load(new FileInputStream(dropboxKeysFile))

 	 if (dropboxKeys!=null && dropboxKeys.containsKey('client_id') && dropboxKeys.containsKey('secret_id')) {

	 clientId = dropboxKeys['client_id']
	 secretId = dropboxKeys['secret_id']
	}

	if (prefPageDropboxFile.exists() && prefPageDropboxFile.canWrite()) {
		clientIdCharArray=convertStringToCharArray(clientId)
		secretIdCharArray=convertStringToCharArray(secretId)

      		// Copy the keys into the Java code
		ant.replaceregexp(match:'\'c\', \'l\', \'i\', \'e\', \'n\', \'t\'', replace:clientIdCharArray, flags:'g', byline:true) {
        		fileset(dir: prefPageDropboxDirectoryPath, includes: prefPageDropboxFileName)
		}
		ant.replaceregexp(match:'\'s\', \'e\', \'c\', \'r\', \'e\', \'t\'', replace:secretIdCharArray, flags:'g', byline:true) {
        		fileset(dir: prefPageDropboxDirectoryPath, includes: prefPageDropboxFileName)
		}
	}

        println "\t ${STOPHERE} copied"
      } else {

 	 ant.fail('The file containing the dropbox secret key is missing!')
      }
   }

}

/*
* 2. Build product with maven/tycho
*/
task mt_20_BuildProduct {

   doLast {

      //run: mvn verify -P build-release

      def buildDir = file('../..')

      mavenexec {

         workingDir  buildDir
         goals       'verify'
         
         // repos can be used offline when this option "offline true" is set, 
         // by default it is disabled 
//       offline     true

         options {
            activateProfiles   = ['build-release']
         }
      }
   }
}


/*
* Copy generated product file into product archive folder
*/
task mt_30_CopyProduct {

   doLast {

//    From:   C:\DAT\MT\mytourbook\build\build.net.tourbook
//    Into:   C:\DAT\MT\mytourbook\build\build.net.tourbook.product\target\products

      println '\tFrom ' + _dirProductBuilt       
      println '\tInto ' + _dirProductArchive

      // copy into archive folder
      copy {

         from (_dirProductBuilt) {
            include '*' + _mtVersion + '*'
         }

         into _dirProductArchive
      }
   }
}

//TODO FB obfsucate ONLY the dropbox prefpage class


/*
 Extract win archives in separate dirs that the exe files can be compiled
*/
task mt_40_ExtractWinFiles {

   doLast {

      println 'Extracting from ' + _dirProductArchive

      file(_dirProductArchive).eachFileMatch(~/.*win.*.zip/) { winZipFile->

         def winZipFileName = winZipFile.name
         def winZipName = winZipFileName.take(winZipFileName.lastIndexOf('.'))

         def outputDir = file(_pathProductArchive + '/' + winZipName)

         println '\t' + outputDir
         
         copy {
            from zipTree(winZipFile)
            into outputDir
         }
      }
   }
}


/*
 Create win exe files
*/
task mt_50_CreateExeFiles {
        
   doLast {
       
      println 'Creating Windows setup files'
      
      def winInnoSetupDirName = _dirWinInnoSetup.absolutePath
      
      def win64SetupConfigFilename = file(winInnoSetupDirName + '/mytourbook-core-64-create-setup_exe.iss').absolutePath
      
      exec {
      
         println '\twin 64'
      
         commandLine 'cmd', '/c', '"'+_pathInnoSetupCompilerApp+'"'
         args      win64SetupConfigFilename
      }
   }
}

/*
 Cleanup win zip files
*/
task mt_60_CleanupWinFiles {
        
   doLast {
       
      println 'Deleting extracted files from ' + _dirProductArchive
      
      def hiddenDir = file(_pathProductArchive + '/hidden')
      
      file(_dirProductArchive).eachFileMatch(~/.*win.*.zip/) { winZipFile->
         
         def winZipFileName = winZipFile.name
         def winZipName = winZipFileName.take(winZipFileName.lastIndexOf('.'))
         
         def outputDir = file(_pathProductArchive + '/' + winZipName)

         println '\tdelete\t\t' + outputDir
         
         // delete extracted files
         outputDir.deleteDir()
         
         // move zip into hidden folder
         hiddenDir.mkdirs()
         def hiddenFile = file(hiddenDir.absolutePath + '/' + winZipFileName)
         println '\tmove into\t' + hiddenFile 
         
         // delete old file when available
         hiddenFile.delete()
         
         winZipFile.renameTo(hiddenFile)
      }
   }
}


/*
* Copy realease notes into product archive folder
*/
task mt_70_CopyReleaseNotes {

   doLast {

      def releaseNotesFilename = _mtVersion + '-readme.txt'
      
      def fileReleaseNotesFrom = file(_dirProductReleaseNotes.absolutePath + '/' + releaseNotesFilename)

      println '\tFrom ' + fileReleaseNotesFrom       
      println '\tInto ' + _dirProductArchive

      // copy into archive folder
      if (fileReleaseNotesFrom.exists()) {
      
         println "\tFile ${releaseNotesFilename} copied"

         copy {
            from fileReleaseNotesFrom
            into _dirProductArchive
         }
      } else {

         println "\tFile \"${fileReleaseNotesFrom}\" is not available"
      }
   }
}

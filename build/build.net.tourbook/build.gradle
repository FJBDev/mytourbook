plugins {
   
   id 'org.sonarqube' version '6.2.0.5505'
   id 'jacoco'
}

// get MT version and remove quotes
def _mtVersionRaw                = project(':mytourbook').ext.myTourbookVersion      // '18.2.0'
def _mtVersion                   = _mtVersionRaw.replaceAll('\'', '')                //  18.2.0

def _dirProductBuilt             = file('../build.net.tourbook.product/target/products')
def _dirProductArchive           = file('../../../../mytourbook-PRODUCT/' + _mtVersion)
def _dirProductReleaseNotes      = file('../../info/release-notes')
def _pathProductArchive          = _dirProductArchive.absolutePath
                                 
def _dirWinInnoSetup             = file('../../INSTALL-UPDATES/installer-net.tourbook/win-Inno.Setup')
def _pathInnoSetupCompilerApp    = file('c:/Program Files (x86)/Inno Setup 6/iscc.exe').absolutePath

// Use the new Gradle 9 compatible task graph API
gradle.taskGraph.beforeTask { Task task ->
    // show a task indicator
   println '---------------------------------------------------------------------------------------'
   println ''
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    // show more space
   println ''
   println ''
}

defaultTasks 'mt_0_Build'

task mt_0_Build {
    group = 'build'
    description = 'Main build task for MyTourbook'
}

mt_0_Build.dependsOn( 
   'mt_10_CreateBuildFiles', 
   'mt_20_BuildProduct', 
   'mt_30_CopyProduct',
   'mt_40_ExtractWinFiles',
   'mt_50_CreateExeFiles',
   'mt_60_CleanupFiles',
   'mt_70_CopyReleaseNotes',
)

sonarqube {
  properties {
    property 'sonar.projectKey',                     'wolfgang-ch_mytourbook'
    property 'sonar.organization',                   'wolfgang-ch'
    property 'sonar.host.url',                       'https://sonarcloud.io'
    property 'sonar.projectVersion',                            _mtVersion
    property 'sonar.projectName',                               'MyTourbook'
    property 'sonar.sources',                                   'bundles'
    property 'sonar.java.binaries',                             '.'
    property 'sonar.java.libraries',                            'bundles/**/*.jar'
    property 'sonar.exclusions',                                'bundles/net.tourbook.ext.jars*/**/*, bundles/net.tourbook.model/map-models/**/*.*'
    property 'sonar.coverage.exclusions',                       'bundles/*tests/**/*.*, bundles/**/src-test/**/*.*, bundles/net.tourbook.p2/**/*.*, bundles/**/Slideout*.java, bundles/**/*_DISABLED.java, bundles/**/*_TEMPLATE_*.java, bundles/net.tourbook/src/net/tourbook/update/**/*.*, bundles/net.tourbook/src/net/tourbook/map3/**/*.*, bundles/net.tourbook/src/net/tourbook/map25/**/*.*, bundles/**/AbstractRRShell.java, bundles/net.tourbook.cloud/src/net/tourbook/cloud/dropbox/**/*.*, bundles/net.tourbook/src/de/byteholder/geoclipse/tests/**/*.*, bundles/**/*ExternalDevice.java, bundles/**/device/Port*.java, bundles/**/SimpleSerialDevice.java, bundles/**/Fmath.java'
    property 'sonar.cpd.exclusions',                            'bundles/net.tourbook.web/WebContent-rel/tourbook/search/**/*.*,bundles/net.tourbook.web/WebContent-dev/tourbook/search/nls/**/*.js'
    property 'sonar.coverage.jacoco.xmlReportPaths',            '../../mytourbook-BUILD-autocreated/core/net.tourbook.tests/target/site/jacoco-aggregate/jacoco.xml, ../../mytourbook-BUILD-autocreated/core/net.tourbook.ui.tests/target/site/jacoco-aggregate/jacoco.xml'
    property 'sonar.java.source',                               '17'
    property 'sonar.issue.ignore.multicriteria',                'e1,e2,e3,e4'
    property 'sonar.issue.ignore.multicriteria.e1.ruleKey',     'java:S1104'
    property 'sonar.issue.ignore.multicriteria.e1.resourceKey', 'bundles/**/Messages.java'
    property 'sonar.issue.ignore.multicriteria.e2.ruleKey',     'java:S1444'
    property 'sonar.issue.ignore.multicriteria.e2.resourceKey', 'bundles/**/Messages.java'
    property 'sonar.issue.ignore.multicriteria.e3.ruleKey',     'java:S1104'
    property 'sonar.issue.ignore.multicriteria.e3.resourceKey', 'bundles/**/UI.java'
    property 'sonar.issue.ignore.multicriteria.e4.ruleKey',     'java:S1444'
    property 'sonar.issue.ignore.multicriteria.e4.resourceKey', 'bundles/**/UI.java'
  }
}

/*
* 1. Copy all MT files into a temp folder, it is using task/target 'create-build-files' from the Ant script
*/
task mt_10_CreateBuildFiles {
   
   // import Ant build, every target will be a task
   ant.importBuild 'CREATE_MT_BuildFiles.xml'

   dependsOn('create-build-files')
}

/*
* 2. Build product with maven/tycho
*/
task mt_20_BuildProduct(type: Exec) {
   group = 'build'
   description = 'Build product with Maven/Tycho'

   workingDir = "../.."
   commandLine 'cmd', '/c', 'mvn clean verify -P build-release'
}

/*
* Copy generated product file into product archive folder
*/
task mt_30_CopyProduct {
   group = 'build'
   description = 'Copy generated product files to archive folder'

   doLast {
      //    From:   C:\DAT\MT\mytourbook\build\build.net.tourbook
      //    Into:   C:\DAT\MT\mytourbook\build\build.net.tourbook.product\target\products

      println '\tFrom ' + _dirProductBuilt       
      println '\tInto ' + _dirProductArchive

      // copy into archive folder
      copy {
         from (_dirProductBuilt) {
            include '*' + _mtVersion + '*'
         }
         into _dirProductArchive
      }
   }
}

/*
 Extract win archives in separate dirs that the exe files can be compiled
*/
task mt_40_ExtractWinFiles {
   group = 'build'
   description = 'Extract Windows archives for exe compilation'

   doLast {
      println 'Extracting from ' + _dirProductArchive

      fileTree(_dirProductArchive).matching { include '**/*win*x86*.zip' }.each { winZipFile->
         def winZipFileName   = winZipFile.name
         def winZipName       = winZipFileName.substring(0, winZipFileName.lastIndexOf('.'))

         def outputDir        = file(_pathProductArchive + '/' + winZipName)

         println '\t' + outputDir
         
         copy {
            from zipTree(winZipFile)
            into outputDir
         }
      }
   }
}

/*
 Create win exe files
*/
// Create separate Exec tasks for each setup file
task createWin64Setup(type: Exec) {
   group = 'build'
   description = 'Create Windows 64 setup file'
   
   workingDir = _dirWinInnoSetup.absolutePath
   commandLine 'cmd', '/c', '"'+_pathInnoSetupCompilerApp+'"'
   args = [file(_dirWinInnoSetup.absolutePath + '/mytourbook-create-setup-exe.iss').absolutePath]
}

task createWin64SetupWithJRE(type: Exec) {
   group = 'build'
   description = 'Create Windows 64 setup file with JRE'
   
   workingDir = _dirWinInnoSetup.absolutePath
   commandLine 'cmd', '/c', '"'+_pathInnoSetupCompilerApp+'"'
   args = [file(_dirWinInnoSetup.absolutePath + '/mytourbook-create-setup-exe-with-jre.iss').absolutePath]
}

task mt_50_CreateExeFiles {
   group = 'build'
   description = 'Create Windows executable setup files'
   
   dependsOn createWin64Setup, createWin64SetupWithJRE
   
   doLast {
      println 'Creating Windows setup files'
      println '\tWin 64'
      println '\tWin 64 with Java runtime'
   }
}

/*
 Cleanup win zip files
*/
task mt_60_CleanupFiles {
   group = 'build'
   description = 'Clean up extracted files and JRE files'
        
   doLast {
      /*
         Deleting extracted files
      */
      println 'Deleting extracted files'
      
      fileTree(_dirProductArchive).matching { include '**/*win*x86.zip' }.each { winZipFile->
         def winZipFileName   = winZipFile.name
         def winZipName       = winZipFileName.substring(0, winZipFileName.lastIndexOf('.'))
         
         def outputDir        = file(_pathProductArchive + '/' + winZipName)

         println '\tdelete folder\t\t' + winZipName
         
         // delete extracted files
         outputDir.deleteDir()
      }
      
      /*
         Delete JRE files      
      */
      println '' 
      println 'Deleting JRE files'
      
      fileTree(_dirProductArchive).matching { include '**/*-jre-*.zip' }.each { jreFile->
         println '\tdelete file\t\t' + jreFile
         jreFile.delete()
      }
      
      fileTree(_dirProductArchive).matching { include '**/*-jre-*.tar.gz' }.each { jreFile->
         println '\tdelete file\t\t' + jreFile
         jreFile.delete()
      }
   }
}

/*
* Copy release notes into product archive folder
*/
task mt_70_CopyReleaseNotes {
   group = 'build'
   description = 'Copy release notes to product archive folder'

   doLast {
      def releaseNotesFilename = _mtVersion + '-readme.txt'
      
      def fileReleaseNotesFrom = file(_dirProductReleaseNotes.absolutePath + '/' + releaseNotesFilename)

      println '\tFrom ' + fileReleaseNotesFrom       
      println '\tInto ' + _dirProductArchive

      // copy into archive folder
      if (fileReleaseNotesFrom.exists()) {
      
         println "\tFile ${releaseNotesFilename} copied"

         copy {
            from fileReleaseNotesFrom
            into _dirProductArchive
         }
      } else {
      
         println "\tFile \"${fileReleaseNotesFrom}\" is not available"
      }
   }
}
